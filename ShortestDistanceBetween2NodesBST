//Binary Search Tree
class Node {
    int val;
    Node left, right;

    Node(int x) {
        val = x;
        left = null;
        right = null;
    }
}

public class ShortestDistance2Nodes {
    
    public static Node lowestCommonAncestor(Node root, int p, int q) {
        while (root != null) {
            if (root.val > p && root.val > q) {
                root = root.left;
            } else if (root.val < p && root.val < q) {
                root = root.right;
            } else {
                break; // Found LCA
            }
        }
        return root;
    }

    public static int distance(Node lca, int target) {
        if (lca == null) return -1; // Handle case where target is missing
        if (lca.val == target) return 0;
        else if (lca.val > target) return 1 + distance(lca.left, target);
        else return 1 + distance(lca.right, target);
    }

    public static int distanceBetweenTwoKeys(Node root, int a, int b) {
        Node lca = lowestCommonAncestor(root, a, b);
        int d1 = distance(lca, a);
        int d2 = distance(lca, b);
        
        if (d1 == -1 || d2 == -1) return -1; // If one key is missing, return -1
        return d1 + d2;
    }

    public static void main(String[] args) {
        Node root = new Node(5);
        root.left = new Node(2);
        root.left.left = new Node(1);
        root.left.right = new Node(3);
        root.right = new Node(12);
        root.right.left = new Node(9);
        root.right.right = new Node(21);
        root.right.right.left = new Node(19);
        root.right.right.right = new Node(25);

        int a = 9, b = 25;
        System.out.println("Distance between " + a + " and " + b + ": " + distanceBetweenTwoKeys(root, a, b));
    }
}
